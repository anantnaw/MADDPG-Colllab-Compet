03/05/2019 12:49:43 PM INFO: Reading notebook Tennis.ipynb
03/05/2019 12:49:44 PM INFO: Running cell:
%load_ext autoreload
%autoreload 2

03/05/2019 12:49:44 PM INFO: Cell returned
03/05/2019 12:49:44 PM INFO: Running cell:
from unityagents import UnityEnvironment
import numpy as np

03/05/2019 12:49:44 PM INFO: Cell returned
03/05/2019 12:49:44 PM INFO: Running cell:
env = UnityEnvironment(file_name='./Tennis_Linux_NoVis/Tennis.x86_64')

Found path: /home/ubuntu/lab-rl/deep-reinforcement-learning/MADDPG-new/./Tennis_Linux_NoVis/Tennis.x86_64
Mono path[0] = '/home/ubuntu/lab-rl/deep-reinforcement-learning/MADDPG-new/./Tennis_Linux_NoVis/Tennis_Data/Managed'
Mono config path = '/home/ubuntu/lab-rl/deep-reinforcement-learning/MADDPG-new/./Tennis_Linux_NoVis/Tennis_Data/MonoBleedingEdge/etc'
Preloaded 'libgrpc_csharp_ext.x64.so'
Unable to preload the following plugins:
	libgrpc_csharp_ext.x86.so
Logging to /home/ubuntu/.config/unity3d/Unity Technologies/Unity Environment/Player.log
03/05/2019 12:49:45 PM INFO: Cell returned
03/05/2019 12:49:45 PM INFO: Running cell:
# get the default brain
brain_name = env.brain_names[0]
brain = env.brains[brain_name]

03/05/2019 12:49:45 PM INFO: Cell returned
03/05/2019 12:49:45 PM INFO: Running cell:
# reset the environment
env_info = env.reset(train_mode=True)[brain_name]

# number of agents 
num_agents = len(env_info.agents)
print('Number of agents:', num_agents)

# size of each action
action_size = brain.vector_action_space_size
print('Size of each action:', action_size)

# examine the state space 
states = env_info.vector_observations
state_size = states.shape[1]
print('There are {} agents. Each observes a state with length: {}'.format(states.shape[0], state_size))
print('The state for the first agent looks like:', states[0])

rewards = env_info.rewards
print('reward shape', len(rewards))
print('rewards', rewards)

03/05/2019 12:49:45 PM INFO: Cell returned
03/05/2019 12:49:45 PM INFO: Running cell:
for i in range(3):                                      # play game for 5 episodes
    env_info = env.reset(train_mode=False)[brain_name]     # reset the environment    
    states = env_info.vector_observations                  # get the current state (for each agent)
    scores = np.zeros(num_agents)                          # initialize the score (for each agent)
    steps = 0
    while True:
        steps += 1
        actions = np.random.randn(num_agents, action_size) # select an action (for each agent)
        actions = np.clip(actions, -1, 1)                  # all actions between -1 and 1
        env_info = env.step(actions)[brain_name]           # send all actions to tne environment
        next_states = env_info.vector_observations         # get next state (for each agent)
        rewards = env_info.rewards                         # get reward (for each agent)
        dones = env_info.local_done                        # see if episode finished
        scores += env_info.rewards                         # update the score (for each agent)
        states = next_states                               # roll over states to next time step
        print('\repisode {} - steps {} - rewards {} | scores {} - done {}'.format(i,steps,rewards,scores,dones), end='')

        if np.any(dones):                                  # exit loop if episode finished
            break
            
    print('\nScore (max over agents) from episode {}: {}\n'.format(i, np.max(scores)))

03/05/2019 12:49:49 PM INFO: Cell returned
03/05/2019 12:49:49 PM INFO: Running cell:
# env.close()

03/05/2019 12:49:49 PM INFO: Cell returned
03/05/2019 12:49:49 PM INFO: Running cell:
%matplotlib inline

import torch

from maddpg import MADDPG

from collections import deque
import matplotlib.pyplot as plt
import time, os

# from maddpg import MADDPG
# from buffer import ReplayBuffer
# from utilities import transpose_list, transpose_to_tensor
# from tensorboardX import SummaryWriter

03/05/2019 12:49:50 PM INFO: Cell returned
03/05/2019 12:49:50 PM INFO: Running cell:
maddpg = MADDPG(24, 2, 2, 1976)

03/05/2019 12:49:52 PM INFO: Cell returned
03/05/2019 12:49:52 PM INFO: Running cell:
scores_max_hist = []
scores_mean_hist = []

def maddpg_train(n_episodes=3000):
    
    scores_deque = deque(maxlen=100)
    solved = False
    
    for i_episode in range(n_episodes):
        env_info = env.reset(train_mode=True)[brain_name]
        state = env_info.vector_observations
        scores = np.zeros(num_agents)
        maddpg.reset()
        step = 0
        while True:
            step += 1
            action = maddpg.act(state, i_episode, add_noise=True)
            env_info = env.step(action)[brain_name]
            
            next_state = env_info.vector_observations
            reward = env_info.rewards
            done = env_info.local_done
            
            scores += reward
            
            maddpg.step(i_episode, state, action, reward, next_state, done)
            
            if np.any(done):
                break
                
            state = next_state
            
        score_max = np.max(scores)
        scores_deque.append(score_max)
        score_mean = np.mean(scores_deque)
        
        scores_max_hist.append(score_max)
        scores_mean_hist.append(score_mean)

        print('\r{} episode\tavg score {:.5f}\tmax score {:.5f}'.format(i_episode, np.mean(scores_deque), score_max), end='')
        if solved == False and score_mean >= 0.5:
            print('\nEnvironment solved after {} episodes with the average score {}\n'.format(i_episode, score_mean))
            maddpg.save()
            solved = True
        
        if i_episode % 500 == 0:
            print()
    

03/05/2019 12:49:52 PM INFO: Cell returned
03/05/2019 12:49:52 PM INFO: Running cell:
maddpg_train()

